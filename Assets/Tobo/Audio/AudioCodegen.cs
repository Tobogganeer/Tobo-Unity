using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Tobo.Codegen;
using static Tobo.Codegen.CodeFile;
using Tobo.Util;

namespace Tobo.Audio
{
    internal static class AudioCodegen
    {
        // Not sure how many I need but whatever
        static readonly char[] InvalidPathChars = { ' ', '-', '(', ')', ',', '.', '\'', '!', '$', ':' };

        internal static void Generate(SoundLibrary library)
        {
            Sound[] sounds = library.sounds;
            string[] soundIDs = new string[sounds.Length];

            for (int i = 0; i < sounds.Length; i++)
            {
                soundIDs[i] = GetSoundIDString(sounds[i].name);
            }

            CodeFile cf = new CodeFile("Sound.Autogenerated", "Tobo/Audio/Autogenerated");
            cf.AddAutoGeneratedPreamble();

            cf.AddUsingDirective("System.Collections.Generic");
            cf.Space();

            using (cf.Namespace("Tobo.Audio"))
            {
                using (cf.Class(Modifiers.Public | Modifiers.Partial, "Sound"))
                {
                    // Generate Sound.ID enum
                    using (cf.Enum(Modifiers.Public, "ID"))
                    {
                        cf.EnumValue("None", 0);
                        for (int i = 0; i < soundIDs.Length; i++)
                        {
                            cf.EnumValue(soundIDs[i], soundIDs[i].GetStableHashCode());
                        }
                    }

                    cf.Space();
                    System.Text.StringBuilder sb = cf.GetStringBuilder();

                    // Big ol list of sounds
                    foreach (string soundID in soundIDs)
                    {
                        cf.ApplyIndent();
                        sb.Append("public static Sound ").Append(soundID).Append(" => Get(ID.").Append(soundID).AppendLine(");");
                    }

                    cf.Space();

                    // Filename to SoundID name dict
                    cf.ApplyIndent();
                    sb.Append("internal static Dictionary<string, string> FilenameToSoundIDName { get; private set; } = new Dictionary<string, string>()");
                    using (new Scope(cf, true))
                    {
                        for (int i = 0; i < sounds.Length; i++)
                        {
                            // Only write them to dict if they are different
                            if (sounds[i].name == soundIDs[i])
                                continue;

                            cf.ApplyIndent();
                            sb.Append("{ \"").Append(sounds[i].name).Append("\", \"").Append(soundIDs[i]).AppendLine("\" },");
                        }
                    }

                    cf.Space();

                    // Name to SoundID dict
                    cf.ApplyIndent();
                    sb.Append("internal static Dictionary<string, Sound.ID> SoundIDNameToSoundID { get; private set; } = new Dictionary<string, Sound.ID>()");
                    using (new Scope(cf, true))
                    {
                        cf.ApplyIndent();
                        sb.AppendLine("{ \"None\", Sound.ID.None },");

                        for (int i = 0; i < soundIDs.Length; i++)
                        {
                            cf.ApplyIndent();
                            sb.Append("{ \"").Append(sounds[i].name).Append("\", Sound.ID.").Append(soundIDs[i]).AppendLine(" },");
                        }
                    }
                }
            }

            cf.SaveToDisk();
        }

        /// <summary>
        /// Replaces all invalid chars with an underscore
        /// </summary>
        /// <param name="soundAssetName"></param>
        /// <returns></returns>
        public static string GetSoundIDString(string soundAssetName)
        {
            soundAssetName = soundAssetName.Trim();
            // Replace invalid chars
            foreach (char c in InvalidPathChars) { soundAssetName = soundAssetName.Replace(c, '_'); }
            // Prefix with _ if it starts with a number
            if (soundAssetName[0] >= '0' && soundAssetName[0] <= '9')
                soundAssetName = "_" + soundAssetName;
            return soundAssetName;
        }

        public static int GetSoundIDBeforeCompilation(string soundAssetName)
        {
            return GetSoundIDString(soundAssetName).GetStableHashCode();
        }
    }
}
